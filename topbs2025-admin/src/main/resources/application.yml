spring:
  servlet:
    multipart:
      # 單個檔案最大接受3GB，整份Post請求最大接受3GB，記得搭配Nginx去限制檔案大小
      max-file-size: 3GB
      max-request-size: 3GB
  profiles:
    #  預設還是會先讀取application.yml,但可透過spring.profiles.active,來觸發外部配置,達到多環境
    #  激活外部配置 application-*
    #  如果外部配置的key和 application.yml重複, 外部的配置會覆蓋內部
    #  後續打成Jar包,執行時可以添加java -jar xxx.jar --spring.profiles.active=prod 代表啟用prod配置文件
    #  這邊預設啟用dev開發環境的配置文件
    active: dev
  # 配置Json的日期格式
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  # 配置數據源信息
  datasource:
    # 配置數據源類型,使用SpringBoot3 預設的連接持數據源,hikari
    type: com.zaxxer.hikari.HikariDataSource
    # 配置連接數據庫的各個信息
    driver-class-name: org.mariadb.jdbc.Driver
    # 配置URL,mysql8.0剛出時不配置?serverTimezone=Asia/Taipei,會報啟動錯誤
    # 現在好像解決了
    url: jdbc:mariadb://192.168.56.1:3306/topbs2025_international_conferenct?rewriteBatchedStatements=true
    # 配置連接用戶
    username: root
    # 配置用戶密碼
    password: kamikazey0022
    #hikari:

  mail:
    host: smtp.gmail.com
    port: 587
    username: iopbs2025@gmail.com
    password: hngrsqhagkxqxqxn
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            
mybatis-plus:
  # 說明:mybatis3後使用mapperLocations, XML路徑掃描配置,預設為classpath*:/mapper/**/*.xml
  # 說明:多模塊項目的掃描路徑得以classpath*:開頭
  # mapperLocations: classpath*:/mapper/**/*.xml
  
  # 說明:typeAliases-package: 設定別名掃描包,通常用於掃描單表的實體類,但因繼承BaseMapper這很少用
  # 以這個範例項目為例,他應該是這個包下,預設所有實體類的類名(不區分大小寫)為別名
  typeAliasesPackage: tw.com.topbs.pojo.entity
  # 配置設定
  configuration:
    # 配置輸出日誌-方便查看SQL語句
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 延遲加載的全局開關,當開啟時,所有關聯對象都會延遲加載
    # lazyLoadingEnabled默認為false
    lazyLoadingEnabled: true
    # 當開啟時,任何方法的調用都會加載該對象的所有屬性,否則每個屬性會按須加載
    # mybatis 3.4.1以後默認都是false
    aggressiveLazyLoading: false
         
    
# Redisson配置,需要搭配Config配置類使用,
# 不使用全部使用yml自動配置是因為,當今天有需要業務redis , 分布式鎖redis , redis 集群之類的,手動配置更好實現
redisson:
  address: "redis://192.168.56.1:6379"
#  password: "yourpassword"  # 如果有密码的话
  database: 0


#  # redis key前缀
#  keyPrefix:
#  # 线程池数量
#  threads: 4
#  # Netty线程池数量
#  nettyThreads: 8
#  # 单节点配置
#  singleServerConfig:
#    # 客户端名称
#    clientName: "Joey"
#    # 最小空闲连接数
#    connectionMinimumIdleSize: 8
#    # 连接池大小
#    connectionPoolSize: 32
#    # 连接空闲超时，单位：毫秒
#    idleConnectionTimeout: 10000
#    # 命令等待超时，单位：毫秒
#    timeout: 3000
#    # 发布和订阅连接池大小
#    subscriptionConnectionPoolSize: 50
#    # 数据库编号
#    database: 2

  
    
############## Sa-Token 配置 (文档: https://sa-token.cc) ##############
sa-token: 
    #Token前缀 与 Token值 之间必须有一个空格。
    #一旦配置了 Token前缀，则前端提交 Token 时，必须带有前缀，否则会导致框架无法读取 Token。
    #也就是說前端header傳來必須是以下格式
    #  請求key:   Authorization 
    #  請求value: Bearer db69ded6-59e8-43f1-8984-788b560e62ad
    #由于Cookie中无法存储空格字符，也就意味配置 Token 前缀后，Cookie 鉴权方式将会失效，此时只能将 Token 提交到header里进行传输。
    #設定前墜特別適合拿來驗證後端是使用cookie驗證還是請求頭中的token驗證
    token-prefix: Bearer
    
    # token 名称（同时也是 cookie 名称,可自定義）
    token-name: Authorization
    # token 有效期（单位：秒） 默认30天，-1 代表永久有效,我改為一天 86400秒
    timeout: 86400
    # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
    active-timeout: -1
    # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
    is-concurrent: true
    # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
    is-share: true
    # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
    token-style: uuid
    # 是否输出操作日志 
    is-log: true
          
          
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  group-configs:
      #  文檔群組名all, 匹配路徑為根路徑任意開頭映射路徑(Controller),掃描包為com.example
    - group: 'all'
      paths-to-match: '/**'
      # 掃描包  tw.org.organ
      packages-to-scan: tw.com.topbs
      
      #  文檔群組名為owner, 表示這個是給Member用戶使用的API
    - group: 'owner'
      paths-to-match: '/*/owner/**'
      # 掃描包  tw.org.organ
      packages-to-scan: tw.com.topbs
      
      #  文檔群組名為admin, 表示這個是給管理者使用的，具有權限的狀態下,拿table Id 可以訪問所有數據
    - group: 'admin'
      # 這邊注意我是使用exclude 對某個路徑進行排除
      paths-to-exclude: '/*/owner/**'
      # 掃描包  tw.org.organ
      packages-to-scan: tw.com.topbs
      
      
#      #  以下為多個model的Controller層文檔分層,有需要再開啟
#      #  文檔群組名common, 匹配路徑為common開頭的任意映射路徑(Controller),掃描包為com.example
#    - group: 'common'
#      paths-to-match: '/common/**'
#      packages-to-scan: com.example
#      #文檔群組名goods, 匹配路徑為goods開頭的任意映射路徑(Controller),掃描包為com.example
#    - group: 'goods'
#      paths-to-match: '/goods/**'
#      packages-to-scan: com.example

#使用knife4j強化的API文檔介面,只要訪問ip:port/doc.html即可
knife4j:
  enable: true
  setting:
    language: zh_cn


#minio 分布式文件儲存服務,因為沒有實現的starter所以這邊配置主要是獲取屬性值而已
minio:
  #minio服務所在地址,這個指的是server不是控制台
  endpoint: http://192.168.56.1:9000
  #預設儲存桶名稱,這是為了避免上傳時沒選定Bucket造成錯誤
  bucketName: topbs2025
  #訪問的key,預設是帳號,除非有去特別設置Access key
  accessKey: admin
  #訪問的密鑰,預設是密碼,除非有去特別設置Access key
  secretKey: joey880522
    

